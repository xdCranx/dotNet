@page "/Games/edit"
@inject Lab4_2.Data.ApplicationDbContext DB
@using Lab4_2.Components.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Game</h4>
<hr />
@if (Game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Game" OnValidSubmit="UpdateGame" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Game.Id" value="@Game.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Game.Title" class="form-control" />
                    <ValidationMessage For="() => Game.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputText id="genre" @bind-Value="Game.Genre" class="form-control" />
                    <ValidationMessage For="() => Game.Genre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="platform" class="form-label">Platform:</label>
                    <InputText id="platform" @bind-Value="Game.Platform" class="form-control" />
                    <ValidationMessage For="() => Game.Platform" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Game.Price" class="form-control" />
                    <ValidationMessage For="() => Game.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="releasedate" class="form-label">ReleaseDate:</label>
                    <InputDate id="releasedate" @bind-Value="Game.ReleaseDate" class="form-control" />
                    <ValidationMessage For="() => Game.ReleaseDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="numofreviews" class="form-label">NumOfReviews:</label>
                    <InputNumber id="numofreviews" @bind-Value="Game.NumOfReviews" class="form-control" />
                    <ValidationMessage For="() => Game.NumOfReviews" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="avgrating" class="form-label">AvgRating:</label>
                    <InputNumber id="avgrating" @bind-Value="Game.AvgRating" class="form-control" />
                    <ValidationMessage For="() => Game.AvgRating" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="imgurl" class="form-label">ImgUrl:</label>
                    <InputText id="imgurl" @bind-Value="Game.ImgUrl" class="form-control" />
                    <ValidationMessage For="() => Game.ImgUrl" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/games">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Game? Game { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Game ??= await DB.Games.FirstOrDefaultAsync(m => m.Id == Id);

        if (Game is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateGame()
    {
        DB.Attach(Game!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!GameExists(Game!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/games");
    }

    bool GameExists(int id)
    {
        return DB.Games.Any(e => e.Id == id);
    }
}
